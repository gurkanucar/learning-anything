#include <ESP8266WiFi.h>
#include <PubSubClient.h>

const char *ssid = "";
const char *password = "";


// ---------------------------------------------------------------------------
// MQTT Broker Settings
// ---------------------------------------------------------------------------
const char *mqtt_broker   = "139.162.135.55";
const char *mqtt_topic    = "user/topic";      // Listening/Publishing topic
const char *mqtt_username = "admin";
const char *mqtt_password = "pass";
const int   mqtt_port     = 1884;

// ---------------------------------------------------------------------------
// Pins & Variables
// ---------------------------------------------------------------------------
// Example LED pins (adjust them according to your board or wiring)
const int ledPins[5] = { D1, D2, D3, D4, D5 };

// We'll read from the analog pin A0 for the potentiometer:
const int potPin = A0;

// Keep track of the last potentiometer reading for change detection
int lastPotValue = 0;

// WiFi and MQTT clients
WiFiClient espClient;
PubSubClient mqtt_client(espClient);

// ---------------------------------------------------------------------------
// Function Declarations
// ---------------------------------------------------------------------------
void connectToWiFi();
void connectToMQTTBroker();
void mqttCallback(char *topic, byte *payload, unsigned int length);

void setup() {
  Serial.begin(115200);

  // Initialize LED pins
  for (int i = 0; i < 5; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW);  // Start off
  }

  connectToWiFi();
  
  // Configure the MQTT client
  mqtt_client.setServer(mqtt_broker, mqtt_port);
  mqtt_client.setCallback(mqttCallback);
  
  connectToMQTTBroker();
}

void loop() {
  // Reconnect if the connection is lost
  if (!mqtt_client.connected()) {
    connectToMQTTBroker();
  }
  mqtt_client.loop();

  // -------------------------------------------------------------------------
  //  Read the potentiometer value and publish only if it has changed
  // -------------------------------------------------------------------------
  int currentPotValue = analogRead(potPin);

  // Simple check to avoid constant MQTT spam; 
  // you can define your own threshold or approach
  if (abs(currentPotValue - lastPotValue) > 2) {
    lastPotValue = currentPotValue;
    // Convert to String and then publish
    String potString = String(currentPotValue);
    
    // Publish the potentiometer reading to the same topic or another if you prefer
    mqtt_client.publish("user/topic/potValue", potString.c_str());
    
    Serial.print("Potentiometer changed, new value: ");
    Serial.println(potString);
  }

  // Small delay to prevent insane read rates
  delay(100);
}

// ---------------------------------------------------------------------------
// Connect to WiFi
// ---------------------------------------------------------------------------
void connectToWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("\nConnected to the WiFi network");
}

// ---------------------------------------------------------------------------
// Connect or reconnect to the MQTT broker
// ---------------------------------------------------------------------------
void connectToMQTTBroker() {
  while (!mqtt_client.connected()) {
    String client_id = "esp8266-client-" + String(WiFi.macAddress());
    
    Serial.printf("Connecting to MQTT Broker as %s.....\n", client_id.c_str());
    
    if (mqtt_client.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Connected to MQTT broker");
      mqtt_client.subscribe(mqtt_topic);
      
      // Publish message upon successful connection (optional)
      mqtt_client.publish(mqtt_topic, "Hi EMQX, I'm an ESP8266 reporting for duty!");
    } else {
      Serial.print("Failed to connect to MQTT broker, rc=");
      Serial.print(mqtt_client.state());
      Serial.println(" - trying again in 5 seconds");
      delay(5000);
    }
  }
}

// ---------------------------------------------------------------------------
// Callback when a message arrives on a subscribed topic
// ---------------------------------------------------------------------------
void mqttCallback(char *topic, byte *payload, unsigned int length) {
  Serial.print("Message received on topic: ");
  Serial.println(topic);

  // Convert incoming payload to a String
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  Serial.print("Message: ");
  Serial.println(message);
  Serial.println("-----------------------");

  // -------------------------------------------------------------------------
  //  Parse LED commands
  //  For example, assume the message is: "LED1 ON", "LED2 OFF", ...
  //  (You can define your own format. For instance: "1 on", "1 off", etc.)
  // -------------------------------------------------------------------------
  message.toUpperCase(); // Convert to uppercase for easier matching

  // A simple approach: check if "LED" is in the string, extract the index, and check "ON"/"OFF"
  if (message.startsWith("LED")) {
    // We expect something like: LED1 ON or LED2 OFF, etc.
    int ledNum = message.charAt(3) - '0'; // Convert char to integer
    if (ledNum >= 1 && ledNum <= 5) {
      // Check if ON or OFF
      if (message.indexOf("ON") != -1) {
        digitalWrite(ledPins[ledNum - 1], HIGH);
        Serial.printf("LED%d turned ON\n", ledNum);
      }
      else if (message.indexOf("OFF") != -1) {
        digitalWrite(ledPins[ledNum - 1], LOW);
        Serial.printf("LED%d turned OFF\n", ledNum);
      }
    }
  }
}